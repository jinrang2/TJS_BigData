text <- read_html(url, encoding = 'CP949')
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
title
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
review <- html_text(nodes,trim=TRUE)
review
review <- gsub('\t','',review)
review <- gsub('\n','',review)
review <- gsub('신고','',review)
review
review_content <- unlist(strsplit(review,'중[0-9]{1,2}'))[seq(2,20,2)]
review_content[is.na(review_content)] <- 0
unlist(strsplit(review,'중[0-9]{1,2}'))
review_content
idx <- regexpr('중[0-9]{1,2}',review)
idxend <- unlist(attributes(idx))
substr(review, idx+1, idxend)
point <- substr(review, idx+1, (idx+idxend-1))
page <- cbind(title, movieInfo)
print(movieInfo)
page <- cbind(page, point)
print(point)
page <- cbind(page, review_content)
print(review_content)
movie.review <- rbind(movie.review, page)
}
review_content[is.na(review_content)] <- '리뷰없음'
for(i in 1:2){
url <- paste0(site,i);
text <- read_html(url, encoding = 'CP949')
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
title
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
review <- html_text(nodes,trim=TRUE)
review
review <- gsub('\t','',review)
review <- gsub('\n','',review)
review <- gsub('신고','',review)
review
review_content <- unlist(strsplit(review,'중[0-9]{1,2}'))[seq(2,20,2)]
review_content[is.na(review_content)] <- '리뷰없음'
unlist(strsplit(review,'중[0-9]{1,2}'))
review_content
idx <- regexpr('중[0-9]{1,2}',review)
idxend <- unlist(attributes(idx))
substr(review, idx+1, idxend)
point <- substr(review, idx+1, (idx+idxend-1))
page <- cbind(title, movieInfo)
print(movieInfo)
page <- cbind(page, point)
print(point)
page <- cbind(page, review_content)
print(review_content)
movie.review <- rbind(movie.review, page)
}
review_content <- unlist(strsplit(review,'중[0-9]{1,2}'))[seq(2,20,2)]
review_content
unlist(strsplit(review,'중[0-9]{1,2}'))
review
nrow(unlist(strsplit(review,'중[0-9]{1,2}')))
length(unlist(strsplit(review,'중[0-9]{1,2}')))
review_content <- unlist(strsplit(review,'중[0-9]{1,2}'))[seq(2,20,2)]
review_content
url <- 'https://movie.naver.com/movie/point/af/list.nhn'
# 영화제목 ; .movie
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
title
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
review <- html_text(nodes,trim=TRUE)
review
review <- gsub('\t','',review)
review <- gsub('\n','',review)
review <- gsub('신고','',review)
review
strsplit(review,'중[0-9]{1,2}')
strsplit(review,'중[0-9]{1,2}')
remDr <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remDr$open()
review
strsplit(review,'중[0-9]{1,2}')
strsplit(review,' - 총 10점')
review_content <- unlist(strsplit(review,'중[0-9]{1,2}'))[seq(2,20,2)]
review_content
length(unlist(strsplit(review,'중[0-9]{1,2}')))
review_content <- unlist(strsplit(review,' - 총 10점'))[seq(2,20,2)]
review_content
strsplit(review,' - 총 10점 중[0-9]{1,2}')
review_content <- unlist(strsplit(review,' - 총 10점 중[0-9]{1,2}'))[seq(2,20,2)]
review_content
bth <- remD$findElement(using='css selector',
value='.html5-main-video')
remD <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remD$open()
remD$navigate('https://youtu.be/tZooW6PritE')
bth <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
btn <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
remD <- remoteDriver(port=4445L, # 포트번호
browserName='chrome') # 사용할 브라우저
remD$open()
remD$navigate('https://youtu.be/tZooW6PritE')
btn <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
btn <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
remD$navigate('https://youtu.be/tZooW6PritE')
btn <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
btn$clickElement()
btn$clickElement()
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
remD$executeScript('window.scrollTo(1500,2000)')
remD$executeScript('window.scrollTo(1500,2000)')
remD$executeScript('window.scrollTo(1500,2000)')
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
remD$executeScript('window.scrollTo(1500,2000)')
remD$executeScript('window.scrollTo(1500,2000)')
remD$executeScript('window.scrollTo(1500,2000)')
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
remD$executeScript('window.scrollTo(1500,2000)')
remD$executeScript('window.scrollTo(2000,2500)')
remD$executeScript('window.scrollTo(2500,3000)')
remD$executeScript('window.scrollTo(3000,3500)')
remD$executeScript('window.scrollTo(3500,4000)')
remD$executeScript('window.scrollTo(4000,4500)')
remD$executeScript('window.scrollTo(4500,5000)')
strsplit(review,' - 총 10점 중[0-9]{1,2}')
review_content <- unlist(strsplit(review,' - 총 10점 중[0-9]{1,2}'))
review_content
# 영화제목 ; .movie
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
title
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
review <- html_text(nodes,trim=TRUE)
review
review <- gsub('\t','',review)
review <- gsub('\n','',review)
review <- gsub('신고','',review)
review
review_content
table(is.na(review_content))
comments <- html %>%  html_nodes('#content-text') %>%  html_text()
comments <- html %>%  html_nodes('#content-text') %>%  html_text()
comments
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
remD$executeScript('window.scrollTo(1000,2000)')
remD$executeScript('window.scrollTo(1000,2500)')
remD$executeScript('window.scrollTo(1000,3000)')
remD$executeScript('window.scrollTo(1000,3500)')
remD$executeScript('window.scrollTo(1000,4000)')
#현재 페이지의 html 소스 가져오기
html <- remD$getPageSource()[[1]]
html <- read_html(html)
comments <- html %>%  html_nodes('#content-text') %>%  html_text()
comments
btn$clickElement()
btn <- remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickElement()
#마우스 스크롤 다운
remD$executeScript('window.scrollTo(0,500)')
remD$executeScript('window.scrollTo(500,1000)')
remD$executeScript('window.scrollTo(1000,1500)')
remD$executeScript('window.scrollTo(1000,2000)')
remD$executeScript('window.scrollTo(1000,2500)')
remD$executeScript('window.scrollTo(1000,3000)')
#현재 페이지의 html 소스 가져오기
html <- remD$getPageSource()[[1]]
html <- read_html(html)
comments <- html %>%  html_nodes('#content-text') %>%  html_text()
comments
write.table(comments,
file='outData/댓글.txt',
sep=',',
row.names=FALSE,
quote=FALSE)
write.csv(result, file='outData/과학다큐결과.csv',
row.names=F)
url <- 'https://movie.naver.com/movie/point/af/list.nhn'
# 영화제목 ; .movie
nodes <- html_nodes(text, '.movie')
title <- html_text(nodes)
title
# 해당 영화 페이지
movieInfo <- html_attr(nodes, 'href')
movieInfo <- paste0(url, movieInfo)
movieInfo
# 평점 ; .list_netizen_score em
nodes <- html_nodes(text, ".list_netizen_score em")
nodes
point <- html_text(nodes)
point
# 영화 리뷰 ; .title
nodes <- html_nodes(text,'.title')
nodes
review <- html_text(nodes,trim=TRUE)
review
review <- gsub('\t','',review)
review <- gsub('\n','',review)
review <- gsub('신고','',review)
review
review_content <- unlist(strsplit(review,' - 총 10점 중[0-9]{1,2}'))
review_content
#################################
# 14장. 지도 시각화
#################################
install.packages("ggiraphExtra")
library(ggiraphExtra)
library(ggiraphExtra)
split(review, is.na(' - 총 10점 중[0-9]{1,2}'))
split(review, ' - 총 10점 중[0-9]{1,2}')
install.packages("mapproj")
install.packages("mapproj") # ggChoropleth 함수 사용을 위한 패키지지
library(mapproj)
install.packages(maps)
install.packages('maps')
install.packages("maps")
library(mapproj)
library(maps)
library(ggplot2)
library(tibble)
library(tibble)
crime <- rownames_to_column(USArrests, var='state')
class(crime)
head(crime,3)
# 미국 지도 주 정보 가져오기
map_data(state)
# 미국 지도 주 정보 가져오기
map_data('state')
View(map_data('state'))
# 미국 지도 주 정보 가져오기
state_map <- map_data('state')
ggChropleth
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map
)
library(ggiraphExtra)
library(mapproj)
library(maps)
library(ggplot2)
library(tibble)
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map
)
library(ggiraphExtra)
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map
)
library(mapproj)
library(maps)
library(ggplot2)
library(tibble)
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map
)
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
#################################
# 14장. 지도 시각화
#################################
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
library(ggiraphExtra)
install.packages("mapproj") # ggChoropleth 함수 사용을 위한 패키지지
library(mapproj)
install.packages('maps')
install.packages("maps")
library(maps)
library(ggplot2)
library(tibble)
# 2 행이름을 변수로
head(USArrests,1)
crime <- rownames_to_column(USArrests, var='state')
class(crime)
head(crime,3)
# 미국 지도 주 정보 가져오기
state_map <- map_data('state')
View(map_data('state'))
ggChropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
ggChoropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
ggChoropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = "state")
crime$state <- tolower(crime$state)
str(crime)
head(crime)
library(ggplot2)
states_map <- map_data("state")
str(states_map)
ggChoropleth(data = crime,
aes(fill = Murder,
map_id = state),
map = states_map)
ggChoropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
ggChoropleth(data=crime,
aes(fill=Merder, map_id=state),
map=state_map,
interactive=T
)
ggChoropleth(data=crime,
aes(fill=Murder, map_id=state),
map=state_map,
interactive=T
)
?map_data
ggChoropleth(data=crime,
aes(fill=Murder, map_id=state),
map=state_map,
interactive=T
)
# 2 행이름을 변수로
head(USArrests,1)
ggChoropleth(data=crime,
aes(fill=Assault, map_id=state),
map=state_map,
interactive=T
)
install.packages('stringi')
install.packages("stringi")
install.packages('devtools')
devtools::install_github('cardiomoon/kormaps2014')
library(kormaps2014)
library(kormaps2014)
head(korpop1)
# korpop2 : 2015년 센서스 데이터 (시군구별)
# korpop3 : 2015년 센서스 데이터 (읍면동별)
head(kormap1)
head(changeCode(kormap1))
library(ggiraphExtra)
ggChoropleth(data=korpop1,
aes(fill=pop,map_id=code,tooltip=name),
map=kormap1,
interactive = T
)
ggChoropleth(data=korpop1,
aes(fill=pop,map_id=code,tooltip=name),
map=kormap1,
interactive = T
)
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
head(kormap1)
head(changeCode(kormap1))
library(ggplot2)
library(ggiraphExtra)
korpop1$name <- iconv(korpop1$name, 'UTF-8','CP949')
korpop1$name
head(korpop1)
kor1
kormpa1
kormap1
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)
ggChoropleth(data = korpop1,       # 지도에 표현할 데이터
aes(fill = pop,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)
korpop1
changeCode(kormap1[,c('name','pop','code')])
head(changeCode(kormap1))
changeCode(kormap1)
changeCode(kormap1[,c('name','pop','code')])
changeCode(korpop1[,c('name','pop','code')])
korpop1
head(kormap1)
changeCode(kormap1)
head(changeCode(kormap1))
korpop1
changeCode(korpop1[,c('name','pop','code')])
korpop1
tbc
str(korpop1)
iconv(tbc$name, 'UTF-8','CP949')
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
tbc$name1 <- iconv(tbc$name1, 'UTF-8','CP949')
changeCode(tbc)
library(kormaps2014)
changeCode(tbc)
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
tbc$name1 <- iconv(tbc$name1, 'UTF-8','CP949')
tbc
library(kormaps2014)
library(ggplot2)
library(ggiraphExtra)
library(kormaps2014)
head(changeCode(tbc))
changeCode(tbc)
tbc
tbc$name <- iconv(tbc$name, 'UTF-8','CP949')
tbc$name1 <- iconv(tbc$name1, 'UTF-8','CP949')
tbc
korpop1
ggChoropleth(data = tbc,       # 지도에 표현할 데이터
aes(fill = NewPts,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap1,        # 지도 데이터
interactive = T)
ggChoropleth(data = tbc,       # 지도에 표현할 데이터
aes(fill = NewPts,       # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),  # 지도 위에 표시할 지역명
map = kormap2,        # 지도 데이터
interactive = T)
kormap2
