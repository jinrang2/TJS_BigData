irisData <- read.table('outData/iris.csv', set=',', header=TRUE, encoding='utf-8')
#1.3 read.table ; 파일을 읽어 데이터 프레임 형태로 저장장
irisData <- read.table('outData/iris.csv', sep=',', header=TRUE, encoding='utf-8')
head(irisData)
tail(irisData)
str(irisData)
irisData$Species <- as.factor(irisData$spceies)
irisData$Species <- as.factor(irisData$Species)
level(iris$Species)
levels(iris$Species)
irisData$Species <- factor(irisData$Species, levels = c("setosa","versicolor","virginica")
irisData$Species
irisData$Species
levels(irisData$Species)
irisData
nrow(iris)
summary(iris)
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringasFactors=T)
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
?write.csv
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', append=FALSE, quote=TRUE ,  sep =',')
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', append=FALSE, quote=TRUE ,  sep =',')
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', append=FALSE, quote=TRUE ,  sep =',')
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', append=FALSE, quote=TRUE ,  sep =',')
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringasFactors=T)
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors = =T)
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors =T)
str(newData)
head(newData)
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
cat('iris요약:','\n', irisSummary, file='outData/irisSummary.txt', append= TRUE, Encoding='utf-8');
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
irisSummary[1,]
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8');
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8');
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[i,]+ '\n', file='outData/irisSummary.txt', Encoding='utf-8');
}
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8');
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[i,]+'\n', file='outData/irisSummary.txt', append=T, Encoding='utf-8');
}
cat(irisSummary[i,],'\n', file='outData/irisSummary.txt', append=T, Encoding='utf-8');
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8');
irisSummary[1,]
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8')
cat(irisSummary[i,],'\n', file='outData/irisSummary.txt', append=T)
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8')
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt')
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
?cat
prime <- function(num){
state <- TRUE
for(i in 3:num-1){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
if( num%%i==0 ){
cat('피제수',num,'제수',i,'\n')
return (FALSE)
}
}
return (TRUE)
}
prime(num)
prime <- function(num){
state <- TRUE
cat('num은 ', num)
for(i in 3:num-1){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
#if( num%%i==0 ){
#  cat('피제수',num,'제수',i,'\n')
#  return (FALSE)
#}
}
return (TRUE)
}
prime(num)
prime <- function(num){
state <- TRUE
cat('num은 ', num)
for(i in 2:num-1){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
#if( num%%i==0 ){
#  cat('피제수',num,'제수',i,'\n')
#  return (FALSE)
#}
}
return (TRUE)
}
prime(num)
num <- 6
prime <- function(num){
state <- TRUE
cat('num은 ', num)
for(i in 2:5){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
#if( num%%i==0 ){
#  cat('피제수',num,'제수',i,'\n')
#  return (FALSE)
#}
}
return (TRUE)
}
prime(num)
num <- 6
prime <- function(num){
state <- TRUE
cat('num은 ', num)
for(i in 3:5){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
#if( num%%i==0 ){
#  cat('피제수',num,'제수',i,'\n')
#  return (FALSE)
#}
}
return (TRUE)
}
prime(num)
num <- 6
prime <- function(num){
state <- TRUE
cat('num은 ', num)
for(i in 3:(num-1)){
cat('피제수',num,'제수',i,'\n')
if(num == 1){
next
}
#if( num%%i==0 ){
#  cat('피제수',num,'제수',i,'\n')
#  return (FALSE)
#}
}
return (TRUE)
}
prime(num)
?cat
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='utf-8')
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding=utf-8)
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding='UTF-8')
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf_8'))
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
head(iris[1:4,])
head(iris[1:4,])
apply(iris[])
head(iris[1:4,])
head(iris[,1:4])
head(iris[,1:4])
# 2.1 apply :
# iris 데이터의 열별평균 행별 평균합계 분산 표준편차 최소값 최대값
iris2 <- iris[,1:4]
head(iris2)
apply(iris2[])
apply(iris2[,1:4], 1, mean)
apply(iris2[,5], 2, mean)
apply(iris2, 2, mean)
apply(iris[,1:4], 1, mean)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
levels(iris)
levels(iris)
head(iris2)
levels(iris)
levels(iris$Species)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='versicolor', select= -5),2,mean)
apply(subset(iris, iris$Species=='virginica', select= -5),2,mean)
apply(iris[,-5],2,FUN=mean)
apply(iris[,-5],2,FUN=sd)
apply(iris[,-5],2,FUN=sum)
apply(iris[,-5],2,FUN=median)
apply(iris[,-5],2,FUN=min)
apply(iris[,-5],2,FUN=max)
name <- c('김','홍','박','이','윤')
kor <- c(90,50,70,60,100)
eng <- c(100,40,50,60,70)
mat <- c(90,91,50,64,80)
student <- data.frame(name, kor, eng, mat)
student
#학생별 평균, 과목별 평균
apply(student[-1])
#학생별 평균, 과목별 평균
apply(student[,-1],2,FUN=mean)
#학생별 평균, 과목별 평균
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
lapply(x, mean)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
source('E:/gon/TJS_BigData/src/07_R/5장_데이터전처리.R', encoding = 'UTF-8', echo=TRUE)
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3,3), logic=c(T,F,F,T))
exp(-3,3)
exp(-3,3)
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3:3), logic=c(T,F,F,T))
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 변환
sapply(x, mean)
sapply(x, quanttile)
sapply(x, quantile, 1:3/4)
fivenum(0:100)
irisData$Species <- factor(irisData$Species, levels = c("setosa","versicolor","virginica")
irisData$Species
levels(irisData$Species)
nrow(iris)
summary(iris)
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
?write.csv
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors =T)
str(newData)
head(newData)
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
irisSummary[1,]
?cat
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
cat('iris요약:','\n', irisSummary, file='outData/irisSummary.txt', append= TRUE, Encoding=utf-8);
# 2. apply 계열 함수 적용
# 2.1 apply :
# iris 데이터의 (열별,행별) (평균,합계,중앙값,표준편차,최소값,최대값)
# apply (데이터 , 1또는2, 함수) 1응 행별 함수 수행, 2은 열별 함수 수행
iris2 <- iris[,1:4]
head(iris2)
apply(iris[,1:4], 1, mean)
apply(iris2, 2, mean)
levels(iris$Species)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='versicolor', select= -5),2,mean)
apply(subset(iris, iris$Species=='virginica', select= -5),2,mean)
apply(iris[,-5],2,FUN=mean)        #열별 평균
apply(iris[,-5],2,FUN=sd)          #열별 표준편차
apply(iris[,-5],2,FUN=sum)         #열별 합계
apply(iris[,-5],2,FUN=median)      #열별 중앙값
apply(iris[,-5],2,FUN=min)         #열별 최소값
apply(iris[,-5],2,FUN=max)         #열별 최대값
name <- c('김','홍','박','이','윤')
kor <- c(90,50,70,60,100)
eng <- c(100,40,50,60,70)
mat <- c(90,91,50,64,80)
student <- data.frame(name, kor, eng, mat)
student
#학생별 평균, 과목별 평균
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
exp(-3,3)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3:3), logic=c(T,F,F,T))
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 변환
sapply(x, mean)
sapply(x, quanttile)
sapply(x, quantile, 1:3/4)
fivenum(0:100)
i39 <- sapply(c(3:9)), seq)
i39
irisData$Species <- factor(irisData$Species, levels = c("setosa","versicolor","virginica")
irisData$Species
levels(irisData$Species)
nrow(iris)
summary(iris)
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
?write.csv
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors =T)
str(newData)
head(newData)
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
irisSummary[1,]
?cat
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
cat('iris요약:','\n', irisSummary, file='outData/irisSummary.txt', append= TRUE, Encoding=utf-8);
# 2. apply 계열 함수 적용
# 2.1 apply :
# iris 데이터의 (열별,행별) (평균,합계,중앙값,표준편차,최소값,최대값)
# apply (데이터 , 1또는2, 함수) 1응 행별 함수 수행, 2은 열별 함수 수행
iris2 <- iris[,1:4]
head(iris2)
apply(iris[,1:4], 1, mean)
apply(iris2, 2, mean)
levels(iris$Species)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='versicolor', select= -5),2,mean)
apply(subset(iris, iris$Species=='virginica', select= -5),2,mean)
apply(iris[,-5],2,FUN=mean)        #열별 평균
apply(iris[,-5],2,FUN=sd)          #열별 표준편차
apply(iris[,-5],2,FUN=sum)         #열별 합계
apply(iris[,-5],2,FUN=median)      #열별 중앙값
apply(iris[,-5],2,FUN=min)         #열별 최소값
apply(iris[,-5],2,FUN=max)         #열별 최대값
name <- c('김','홍','박','이','윤')
kor <- c(90,50,70,60,100)
eng <- c(100,40,50,60,70)
mat <- c(90,91,50,64,80)
student <- data.frame(name, kor, eng, mat)
student
#학생별 평균, 과목별 평균
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
exp(-3,3)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3:3), logic=c(T,F,F,T))
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 변환
sapply(x, mean)
sapply(x, quanttile)
sapply(x, quantile, 1:3/4)
fivenum(0:100)
i39 <- sapply(c(3:9)), seq)
irisData$Species <- factor(irisData$Species, levels = c("setosa","versicolor","virginica")
irisData$Species
levels(irisData$Species)
nrow(iris)
summary(iris)
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
?write.csv
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors =T)
str(newData)
head(newData)
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
irisSummary[1,]
?cat
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
cat('iris요약:','\n', irisSummary, file='outData/irisSummary.txt', append= TRUE, Encoding=utf-8);
# 2. apply 계열 함수 적용
# 2.1 apply :
# iris 데이터의 (열별,행별) (평균,합계,중앙값,표준편차,최소값,최대값)
# apply (데이터 , 1또는2, 함수) 1응 행별 함수 수행, 2은 열별 함수 수행
iris2 <- iris[,1:4]
head(iris2)
apply(iris[,1:4], 1, mean)
apply(iris2, 2, mean)
levels(iris$Species)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='versicolor', select= -5),2,mean)
apply(subset(iris, iris$Species=='virginica', select= -5),2,mean)
apply(iris[,-5],2,FUN=mean)        #열별 평균
apply(iris[,-5],2,FUN=sd)          #열별 표준편차
apply(iris[,-5],2,FUN=sum)         #열별 합계
apply(iris[,-5],2,FUN=median)      #열별 중앙값
apply(iris[,-5],2,FUN=min)         #열별 최소값
apply(iris[,-5],2,FUN=max)         #열별 최대값
name <- c('김','홍','박','이','윤')
kor <- c(90,50,70,60,100)
eng <- c(100,40,50,60,70)
mat <- c(90,91,50,64,80)
student <- data.frame(name, kor, eng, mat)
student
#학생별 평균, 과목별 평균
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
exp(-3,3)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3:3), logic=c(T,F,F,T))
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 변환
sapply(x, mean)
sapply(x, quanttile)
sapply(x, quantile, 1:3/4)
fivenum(0:100)
i39 <- sapply(c(3:9)), seq)
irisData$Species <- factor(irisData$Species, levels = c("setosa","versicolor","virginica")
irisData$Species
levels(irisData$Species)
nrow(iris)
summary(iris)
iris
# 1.4 write.csv
write.csv(iris, file = 'outData/iris1.csv', sep =',')
?write.csv
# 1.5 read.csv
newData <- read.csv('outData/iris1.csv',header=TRUE, stringsAsFactors =T)
str(newData)
head(newData)
summary(newData)
# 1.6 cat ; 분석 결과 등을 저장 할떄
irisSummary <- summary(newData)
irisSummary[1,]
?cat
cat('iris 요약 : ', '\n', file='outData/irisSummary.txt', Encoding('utf-8'))
for(idx in 1:nrow(irisSummary)){
cat(irisSummary[idx,],'\n', file='outData/irisSummary.txt', append=T)
}
cat('iris요약:','\n', irisSummary, file='outData/irisSummary.txt', append= TRUE, Encoding=utf-8);
# 2. apply 계열 함수 적용
# 2.1 apply :
# iris 데이터의 (열별,행별) (평균,합계,중앙값,표준편차,최소값,최대값)
# apply (데이터 , 1또는2, 함수) 1응 행별 함수 수행, 2은 열별 함수 수행
iris2 <- iris[,1:4]
head(iris2)
apply(iris[,1:4], 1, mean)
apply(iris2, 2, mean)
levels(iris$Species)
apply(subset(iris, iris$Species=='setosa', select= -5),2,mean)
apply(subset(iris, iris$Species=='versicolor', select= -5),2,mean)
apply(subset(iris, iris$Species=='virginica', select= -5),2,mean)
apply(iris[,-5],2,FUN=mean)        #열별 평균
apply(iris[,-5],2,FUN=sd)          #열별 표준편차
apply(iris[,-5],2,FUN=sum)         #열별 합계
apply(iris[,-5],2,FUN=median)      #열별 중앙값
apply(iris[,-5],2,FUN=min)         #열별 최소값
apply(iris[,-5],2,FUN=max)         #열별 최대값
name <- c('김','홍','박','이','윤')
kor <- c(90,50,70,60,100)
eng <- c(100,40,50,60,70)
mat <- c(90,91,50,64,80)
student <- data.frame(name, kor, eng, mat)
student
#학생별 평균, 과목별 평균
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
exp(-3,3)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
# e의 -3승부터 e의 3승까지 출력되는 지수함수
x <- list(a=1:10, beta=exp(-3:3), logic=c(T,F,F,T))
lapply(x, mean)
lapply(x, quantile)
lapply(x, quantile, 1:3/4)
# 2.3 sapply : lapply와 유사하나 결과가 행렬이나 벡터로 변환
sapply(x, mean)
sapply(x, quanttile)
sapply(x, quantile, 1:3/4)
fivenum(0:100)
i39 <- sapply(c(3:9)), seq)
