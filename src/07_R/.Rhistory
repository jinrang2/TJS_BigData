# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, `e.deptno`, dname from emp e join dept d on e.deptno = d.deptno")
# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, `e.deptno`, dname from emp e join dept d on e.deptno = d.deptno")
drv <- JDBC("oracle.jdbc.driver.OracleDriver",classPath='ojdbc6.jar')
dr
drv
# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, `e.deptno`, dname from emp e join dept d on e.deptno = d.deptno")
emp <- read.csv('inData/emp.csv',header=T)
emp
dept <- read.csv('inData/dept.csv',header=T)
# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, `e.deptno`, dname from emp e join dept d on e.deptno = d.deptno")
# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, `e.deptno` , dname from emp e join dept d on e.deptno = d.deptno")
# 사번 , 이름 ,직책, 월급, 부서번호, 부서이름
sqldf("select empno, ename, job, sal, e.deptno , dname from emp e join dept d on e.deptno = d.deptno")
con <- dbConnect('jdbc:oracle:thin:@127.0.0.1:1521:xe')
con <- dbConnect('jdbc:oracle:thin:@127.0.0.1:1521:xe','scott','tiger')
con <- dbConnect('jdbc:oracle:thin:@127.0.0.1:1521:xe','scott','tiger')
con <- dbConnect(drv, 'jdbc:oracle:thin:@127.0.0.1:1521:xe','scott','tiger')
con
library("RJDBC")
drv <- JDBC("oracle.jdbc.driver.OracleDriver",classPath='ojdbc6.jar')
drv
con <- dbConnect(drv, 'jdbc:oracle:thin:@127.0.0.1:1521:xe','scott','tiger')
con
emp <- dbGetQuery(con,"select * from emp")
emp
class(emp)
summary(emp)
tail(emp)
emp[1:2]
emp[1:2,empno]
emp[1:2,'empno']
emp[1:2,'EMPNO']
#테이블 전체 데이터 조회
dept < dbReadTable(con,"dept")
#테이블 전체 데이터 조회
dept < dbReadTable(con,"dept")
#테이블 전체 데이터 조회
dept <- dbReadTable(con,"dept")
dept
#sql전송(update, insert, delete - DB데이터수정)
dbSendQuery(con, "insert into dept valeus (50,'it','seoul')")
#sql전송(update, insert, delete - DB데이터수정)
dbSendQuery(con, "insert into dept values (50,'it','seoul')")
#sql전송(update, insert, delete - DB데이터수정)
dbSendQuery(con, "insert into dept values (50,'it','seoul')")
#sql전송(update, insert, delete - DB데이터수정)
dbSendQuery(con, "insert into dept values (50,'it','seoul')")
dbSendQuery(con, "update dept loc='inchon' where deptno=50")
dbSendQuery(con, "update dept set loc='inchon' where deptno=50")
dbSendQuery(con, "UPDATE DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
dbSendQuery(con, "UPDATE SCOTT.DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
dbSendUPDATE(con, "UPDATE XE.SCOTT.DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
dbSendUpdate(con, "UPDATE XE.SCOTT.DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
dbSendUpdate(con, "UPDATE SCOTT.DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
#sql전송(update, insert, delete - DB데이터수정)
dbSendUpdate(con, "insert into dept values (50,'it','seoul')")
#sql전송(update, insert, delete - DB데이터수정)
dbSendUpdate(con, "insert into dept values (50,'it','seoul')")
dbSendUpdate(con, "UPDATE SCOTT.DEPT SET LOC='INCHEON' WHERE DEPTNO=50")
# 드라이버 언로드:
dbDisconnect(con)
# 드라이버 언로드:
dbDisconnect(con)
dbUnloadDriver(drv)
detach("package:RJDBC", unload=TRUE)
# 연결 전 작업
#전작업 : 자바설치, java_home 설정, 작업디렉토리에 odbc6.jar
install.packages("RMySQL")
library("RMySQL")
library("#String driver = "oracle.jdbc.driver.OracleDriver";
#String url = "jdbc:oracle:thin:@127.0.0.1:1521:xe";
#Connection conn = null ;
# 연결 전 작업
#전작업 : 자바설치, java_home 설정, 작업디렉토리에 odbc6.jar
install.packages("RJDBC")
library("RMySQL")
drv <- dbDriver("MySQL")
# 드라이버 클래스 로드
drv <- JDBC("oracle.jdbc.driver.OracleDriver",classPath='ojdbc6.jar')
drv
con <- dbConnect(drv, 'jdbc:oracle:thin:@127.0.0.1:1521:xe','scott','tiger')
con
")
con <- dbConnect(drv,host="127.0.0.1", dbname="kimdb", user="root",password="mysql")
con <- dbConnect(drv,host="127.0.0.1", dbname="kimdb", user="root",password="mysql")
personal <- fetch(rs,n=-1)
rs <- dbSendQuery(con,"select * from personal")
personal <- fetch(rs,n=-1)
personal
class(personal)
dbDisconnect(con)
dbDisconnect(con)
dbUnloadDriver(drv)
######
# 7장. 데이터 처리 성능 향상
########################################
# 이장의 내용 : plyr(패키지)apply 계열, 데이터 구조 변경(melt, cast), 데이터 테이블
#detach("package:dplyr", unload=T)
apply((iris[,1:4],2,mean)
apply(iris[,1:4],2,mean)
# 1. plyr 패키지: 데이터 분할, 함수적용등을 사용하는 함수 포함.
install.packages("plyr")
library(plyr)
library(plyr)
apply(iris[,1:4],2,function(col){mean(col)})
apply(iris[,1:4],2,mean)
apply(iris[,1:4],2,function(col){mean(col)})
sapply(iris[,1:4],mean)
sapply(iris[,1:4],function(col){mean(col)})
sapply(iris[,1:4],function(col){round(mean(col),2)})
sapply(iris[,1:4],mean)
x <- data.frame(value=)
x <- data.frame(v1=c(4,9,16),
v2=c(16,81,196)
)
apply(x,2,FUN=c(sqrt,mean))
apply(x,2,function(col){mean(sqrt(col))   })
emp <- read.csv('inData/emp.csv',header=T)
emp
emp[ , ]
emp[0 , ]
emp[1 , ]
emp[2 , ]
emp[1:2 , ]
emp[emp$ename == 'SMITH' , 1:2 ]
emp[emp$ename == 'SMITH' ,  ]
emp[ ,emp$ename == 'SMITH'  ]
emp[emp[ ,emp$ename == 'SMITH'  ]]
emp[emp[ ,emp$ename == 'SMITH'  ],]
emp[ ,emp$ename == 'SMITH'  ]
emp
# adply == apply(), sapply() ... 비슷
adply(.data=iris[,:1:4], .margins=2, function(col){sum(col)})
# adply == apply(), sapply() ... 비슷
adply(.data=iris[,1:4], .margins=2, function(col){sum(col)})
# adply == apply(), sapply() ... 비슷
adply(.data=iris[,1:4], .margins=1, function(col){sum(col)})
# adply == apply(), sapply() ... 비슷
adply(.data=iris[,1:4], .margins=2, function(col){sum(col)})
# ddply == summaryBy() 비슷
summaryBy(Sepal.Length+Sepal.Width~SPecies, iris, FUN=mean)
emp$ename == 'SMITH'
emp[ ,1]
emp[ ,2]
emp[ ,FALSE]
emp[ ,TRUE]
a <- TRUE+FALSE
a
a <- FALSE+FALSE
a
a <- TRUE+TRUE
a
ddply(.data=iris, .Species, function(group){
data.frame(SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
})
ddply(.data=iris, .Species, function(group){
data.frame(SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
})
ddply(.data=iris, .(Species), function(group){
data.frame(SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
})
ddply(.data=iris, .(Species), function(group){
data.frame(SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
})
ddply(.data=iris, .(Species), summarise,
SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
ddply(.data=iris, .(Species), summarise,
SLmean = mean(Sepal.Length),
SWmean = mean(Sepal.Width)
)
ddply(.data=iris, .(Species), function(group){
data.frame(SLmean = mean(group$Sepal.Length),
SWmean = mean(group$Sepal.Width)
)
})
ddply(.data=iris, .(Species), summarise,
SLmean = mean(Sepal.Length),
SWmean = mean(Sepal.Width)
)
dfx <- data.frame(group=c(rep('A',8), rep('B',15), rep('C',6)),
gender=sample(c('M','F'), size=29, replace=TRUE),
age=round(runiF(29, min=18, max=54)) )
dfx <- data.frame(group=c(rep('A',8), rep('B',15), rep('C',6)),
gender=sample(c('M','F'), size=29, replace=TRUE),
age=round(runif(29, min=18, max=54)) )
dfx
runif(29, min=18, max=54)
runif(29, min=18, max=54)
emp[1:2 , 1:2 ]
runif(29, min=18, max=54)
?runif
dfx <- data.frame(group=c(rep('A',8), rep('B',15), rep('C',6)),
gender=sample(c('M','F'), size=29, replace=TRUE),
age=round(runif(29, min=18, max=54)) )
dfx
ddply(dfx, .(group, gender), summarise, mean=mean(age), sd=sd(age))
ddply(dfx, .(group, gender), summarise, mean=round(mean(age)), sd=sd(age))
ddply(dfx, .(group, gender), summarise, mean=round(mean(age)), sd=round(sd(age)))
summaryBy(age~group+gender, dfx, FUN=c(mean,sd))
x<-summaryBy(age~group+gender, dfx, FUN=c(mean,sd))
library(reshape2)
install.packages(reshape2)
install.packages('reshape2')
library(reshape2)
system("free -g")
airquality.melt <- mel(airquality, id=c('Month','Day'))
view(airquality.melt)
View(airquality.melt)
airquality.melt <- mel(airquality, id=c('Month','Day'))
airquality.melt <- melt(airquality, id=c('Month','Day'))
View(airquality.melt)
airquality[airquality$Month ==  5 & airquality$Day==1,]
airquality
#melt를 통해 바뀐구조
airquality[airquality$Month ==  5 & airquality$Day==1,]
airquality.dc <- dcast(airquality.melt , Month+Day ~variable)
library(parallel)
parallel::detectCores()
parallel::detectCores(logical = FALSE)
#3.데이터 테이블 : 짧고 유연한 구문 사용을 위해 데이터 프레임에서 상속받음
flights_df <- read.csv("inData/flights14.csv")
head(flights_df)
class(flights_df)
library(readxl)
exam <- read_excel("inData/exam.xlsx")
class(exam)
install.packages("data.table")
library(data.table)
flights <- fread("inData/flight14.csv")
flights <- fread("inData/flights14.csv")
class(flights)
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
flights
fs <- fread("inData/flights14.csv")
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
subset(fs, fs$origin=='JFK' & fs$month=5)
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
subset(fs, fs$origin=='JFK' & fs$month==5)
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
resul <- subset(fs, fs$origin=='JFK' & fs$month==5)
# 2. 처음 두 행을 resul에 얻는다
resul <- head(fs,2)
head(fs,2)
fs
fs$origin
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
table(fs$origin)
fs[order(desc(fs$origin)),]
fs[order(desc(fs$origin)),]
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
# 4. arr_delay열만 출력
fs$arr_delay
str(fs)
fs[,1:4]
# 6. year열과 dep_time열 출력
fs[,c('year','dep_time')]
str(fs)
fs <- rename(fs, delay_arr=arr_delay)
fs <- rename(fs, delay_dep=dep_delay)
library(dplyr)
fs <- rename(fs, delay_arr=arr_delay)
fs <- rename(fs, delay_dep=dep_delay)
fs <- rename(fs, arr_delay=delay_arr)
fs <- rename(fs, arr_delay=delay_arr)
fs <- rename(fs, dep_delay=delay_dep)
str(fs)
fs <- rename(fs, c(delay_arr=arr_delay,delay_dep=dep_delay))
str(fs)
fs <- rename(fs, c(delay_arr=arr_delay,delay_dep=dep_delay))
fs$arr_delay
fs <- rename(fs, c(delay_arr=arr_delay,delay_dep=dep_delay))
fs <- data.frame("inData/flights14.csv")
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
resul <- subset(fs, fs$origin=='JFK' & fs$month==5)
# 2. 처음 두 행을 resul에 얻는다
resul <- head(fs,2)
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
fs[order(desc(fs$origin)),]
# 2. 처음 두 행을 resul에 얻는다
resul <- head(fs,2)
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
fs
fs <- as.data.frame("inData/flights14.csv")
class(flights)
fs
fs <- read.csv("inData/flights14.csv")
class(flights)
fs
# 1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
resul <- subset(fs, fs$origin=='JFK' & fs$month==5)
subset(fs, fs$origin=='JFK' & fs$month==5)
head(fs,2)
# 3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
fs[order(fs$origin),]
fs[order(desc(fs$origin)),]
# 4. arr_delay열만 출력
fs$arr_delay
# 5. year열부터 dep_time열까지 출력
fs[,1:4]
# 6. year열과 dep_time열 출력
fs[,c('year','dep_time')]
fs <- rename(fs, c(delay_arr=arr_delay,delay_dep=dep_delay))
fs %>%
filter(arr_delay <0 & dep_delay<0)
fs %>%
filter(arr_delay <0 & dep_delay<0)
fs %>%
filter(arr_delay <0 & dep_delay<0)
fs %>%
filter(arr_delay <0 & dep_delay<0)
subset(fs, arr_delay <0 & dep_delay<0)
sum(subset(fs, arr_delay <0 & dep_delay<0))
n(subset(fs, arr_delay <0 & dep_delay<0))
count(subset(fs, arr_delay <0 & dep_delay<0))
nrow(subset(fs, arr_delay <0 & dep_delay<0)))
nrow(subset(fs, arr_delay <0 & dep_delay<0)))
subset(fs, arr_delay <0 & dep_delay<0))
subset(fs, arr_delay <0 & dep_delay<0)
nrow(subset(fs, arr_delay <0 & dep_delay<0))
# 9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
str(fs)
subset(fs, fs$origin=='JFK')
# 9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
str(fs)
source('E:/gon/TJS_BigData/src/07_R/7장_데이터처리성능향상.r', encoding = 'UTF-8', echo=TRUE)
install.packages("plyr")
fs <- read.csv("inData/flights14.csv")
subset(fs, fs$origin=='JFK')[,'dep_delay']
# 9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
str(fs)
avg(subset(fs, fs$origin=='JFK')[,'dep_delay'] + subset(fs, fs$origin=='JFK')[,'arr_delay'])/2
mean(subset(fs, fs$origin=='JFK')[,'dep_delay'] + subset(fs, fs$origin=='JFK')[,'arr_delay'])/2
fs9 <- subset(fs, fs$origin=='JFK')[,c('dep_delay','arr_delay')]
tapply(fs9,2,mean)
fs9
tapply(fs9,1,mean)
apply(fs9,1,mean)
apply(fs9,2,mean)
fs9temp <- subset(fs, fs$origin=='JFK')[,c('dep_delay','arr_delay')]
fs9 <- apply(subset(fs, fs$origin=='JFK')[,c('dep_delay','arr_delay')],2,mean)
fs9
# 10. 9번의 결과에 title에 mean_arr, mean_dep로 출력
colnames(fs9,c('mean_arr','mean_dep'))
colnames(exam)
# 10. 9번의 결과에 title에 mean_arr, mean_dep로 출력
colnames(fs9) <-  c('mean_arr','mean_dep')
colnames(fs9) <-  c('mean_arr','mean_dep')
fs9
colnames(fs9) <-  c('mean_arr','mean_dep')
fs9
names(fs9) <-  c('mean_arr','mean_dep')
fs9
# 11. JFK 공항의 6월 운항 횟수
subset(fs, fs$origin=='JFK')
# 11. JFK 공항의 6월 운항 횟수
nrow(subset(fs, fs$origin=='JFK'))
fs11 <- subset(fs, fs$origin=='JFK')
nrow(fs11)
# 12. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 출력
str(fs11)
fs11[:5,7]
fs11[:(5,7)]
fs11[,(5,7)]
fs11[,5]
fs11[,c(5,7)]
# 13. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 제외한 모든 열 출력
fs11[,c(-5,-7)]
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
tapply(fs, origin, sum)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
tapply(fs, fs$origin, sum)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
tapply(mpg$highway,fs$origin,n)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
sapply(fs$origin,1,sum)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
sapply(fs$origin, sum)
# 2.2 lapply : list apply (결과도 list)
x <- list(a=1:10, beta=exp(-3,3),logic=c(T,F,F,T))
x
lapply(x, mean)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
sapply(fs, sum)
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
str(fs)
table(fs)
table(fs$origin)
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
str(fs)
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
fs$flight
# 14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
table(fs$origin)
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
subset(fs, fs$carrier=='AA')
# 15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
table(subset(fs, fs$carrier=='AA')$origin)
# 16. origin, dest별로 비행횟수 출력
fs$count <- 1
# 16. origin, dest별로 비행횟수 출력
summaryby(fs$count ~ fs$origin+fs$dest, sum)
# 16. origin, dest별로 비행횟수 출력
summaryBy(fs$count ~ fs$origin+fs$dest, sum)
# 16. origin, dest별로 비행횟수 출력
library(doBy)
summaryBy(fs$count ~ fs$origin+fs$dest, sum)
summaryBy(count ~ origin+dest, fs, sum)
summaryBy(count ~ origin+dest, fs, sum)
summaryBy(count ~ origin+dest, fs, FUN=sum)
# 17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
fs17temp <- subset(fs, fs$carrier=='AA')
tapply(fs$count, fs$origin , sum)
tapply(fs$count, subset(fs, fs$carrier=='AA')$origin), sum)
tapply(fs$count, subset(fs, fs$carrier=='AA')$origin, sum)
subset(fs, fs$carrier=='AA')$origin
summaryBy(count ~ origin+dest, fs, FUN=sum)
summaryBy(arr_delay+dep_delay ~ origin+dest+month, fs, FUN=mean)
# 19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
fs$dep_delay_yn <-
ifelse(dep_delay >0 , TRUE, FALSE)
# 19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
fs$dep_delay_yn <-
ifelse(fs$dep_delay >0 , TRUE, FALSE)
# 19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
fs$dep_delay_yn <- ifelse(fs$dep_delay >0 , TRUE, FALSE)
# 19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
fs$dep_delay_yn <- ifelse(fs$dep_delay >0 , TRUE, FALSE)
fs$arr_delay_yn <- ifelse(fs$arr_delay >0 , TRUE, FALSE)
summaryBy(count ~ dep_delay_yn + arr_delay_yn, fs, sum)
summaryBy(count ~ dep_delay_yn + arr_delay_yn, fs, FUN=sum)
# 20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬
subset(fs, fs$origin=='JFK')
# 20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬
fs_JKF <- subset(fs, fs$origin=='JFK')
tapply(fs$arr_delay + fs$dep_delay , fs$month, sum)
tapply(fs$arr_delay + fs$dep_delay , fs$month, max)
tapply(fs$arr_delay + fs$dep_delay , -fs$month, max)
gender <- factor(c('남','여','남'), levels=c('남','여')
table(gender)
gender <- factor(c('남','여','남'), levels=c('남','여')
gender <- factor(c('남','여','남'), levels=c('남','여'))
gender <- factor(c('남','여','남'), levels=c('남','여'))
table(gender)
data <- c(1,2,3)
data[1:2]
data[c(FALSE,TRUE,FALSE)]
data[c(FALSE,TRUE)]
data[c(FALSE,TRUE,TRUE)]
data
data <- character(5)
data
data <- character(3)
data
data <- numeric(5)
data
data[1] <- 'a'
data
data[2] <- 3
data
data <- logical(2)
data
data <- 1
data
data <- 1
data <- logical(2)
data[0] <- 1
data
data <- logical(2)
data[1] <- TRUE
data
data[1] <- 2
data
seq(0,1,length.out=11)
seq(0,1,length.out=12)
seq(0,1,length.out=20)
seq(0,1,length.out=11)
seq(0,1,length.out=22)
seq(0,1,length.out=21)
seq(0,1,0.5)
seq(1,10,along.with = 4)
seq(1,10,along.with = 5)
seq(1,10,along.with = 1)
seq(1,100,along.with = 1)
seq(1,100,along.with = 2)
seq(1,100,along.with = c(1:10))
seq(1,10,along.with = c(1:10))
seq(1,20,along.with = c(1:10))
seq(1,20,along.with = c(3:10))
seq(1,20,along.with = c(5:10))
seq(1,20,along.with = c(1:5))
seq(1,20,along.with = c(5:10))
