levels(iris$Species)
levels(mpg$displ_div)
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
Sepal.Width
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
summaryBy(Sepal.Width ~ Species,iris)
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
mpg$displ_div
mpg$displ_div <- 'etc'
mpg$displ_div
mpg$displ_div[data1$mpg$displ<=4] <- 'NoImps'
mpg$displ_div[mpg$displ<=4] <- 'low'
mpg$displ_div[mpg$displ=>5] <- 'high'
mpg$displ_div[mpg$displ<=4] <- 'low'
mpg$displ_div[mpg$displ<=4] <- 'low'
mpg$displ_div[mpg$displ>=5] <- 'high'
mpg$displ_div
summaryBy(Sepal.Width + Sepal.Length ~ Species,iris)
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
summaryBy(mpg$highway ~ mpg$displ, mpg)
mpg$highway
mpg$highway
summaryBy(mpg$highway ~ mpg$displ, mpg)
summaryBy(mpg$highway ~ mpg$displ, mpg)
summaryBy(mpg$highway ~ mpg$displ_div, mpg)
str(mpg)
summaryBy(mpg$highway ~ mpg$trans, mpg)
summaryBy(mpg$displ ~ mpg$trans, mpg)
summaryBy(mpg$highway ~ mpg$trans, mpg)
summaryBy(highway ~ trans, mpg, mean)
str(mpg)
summaryBy(highway ~ trans, mpg, FUN=mean)
summaryBy(highway ~ trans, mpg)
aggregate(iris[,1:4],by=list(iris[,5]), mean)
aggregate(iris[,c('city',highway)],by=list(mpg$displ_div), mean)
aggregate(iris[,c('city','highway')],by=list(mpg$displ_div), mean)
str(mpg)
aggregate(iris[,c('city','highway')],by=list(mpg[,'displ_div']), mean)
mpg[,c('displ_div')]
aggregate(iris[,c('city','highway')],by=mpg$displ_div, mean)
str(mpg)
aggregate(mpg[,c('city','highway')],by=mpg$displ_div, mean)
aggregate(mpg[,c('city','highway')],by=list(mpg$displ_div), mean)
order
data <- c(10,30,100,1,3)
names(data) <- c('1st','2nd','3rd','4th','5th')
data
sort(data)
sort(data)
order(data)
data[order(data)]
order
order(aggregate(mpg[,c('city','highway')],by=list(mpg$displ_div), mean))
aggregate(mpg[,c('city','highway')],by=list(mpg$displ_div), mean)
tapply(mpg$highway,mpg$displ_div,mean)
sort(tapply(mpg$highway,mpg$displ_div,mean))
sort(tapply(mpg$highway,mpg$displ_div,mean))
sort(tapply(mpg$highway,mpg$displ_div,mean))
summaryBy(highway + city ~ trans, mpg)
str(mpg)
summaryBy(highway + city ~ displ_div +  trans, mpg)
orderBy(summaryBy(highway + city ~ displ_div +  trans, mpg))
orderBy(highway, data=(summaryBy(highway + city ~ displ_div +  trans, mpg)))
orderBy(mpg$highway, data=(summaryBy(highway + city ~ displ_div +  trans, mpg)))
# 오름차순 정렬
orderBy(~Sepal.Length, data=iris)
orderBy(1, data=(summaryBy(highway + city ~ displ_div +  trans, mpg)))
data=(summaryBy(highway + city ~ displ_div +  trans, mpg)
summaryBy(highway + city ~ displ_div +  trans, mpg)
summaryBy(highway + city ~ displ_div +  trans, mpg)
orderBy(highway.mean, data=(summaryBy(highway + city ~ displ_div +  trans, mpg)))
summaryBy(highway + city ~ displ_div +  trans, mpg)
orderBy(highway.mean, data=data)
data
data <- summaryBy(highway + city ~ displ_div +  trans, mpg)
data
orderBy(highway.mean, data=data)
data
orderBy(~highway.mean, data=data)
orderBy(~highway.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg))
?orderBy
orderBy(~-highway.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg),)
# 내림차순 정렬
orderBy(~-Sepal.Length, data=iris)
orderBy(~-highway.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg),)
orderBy(~highway.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg))
orderBy(~-highway.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg))
orderBy(~-city.mean, data=summaryBy(highway + city ~ displ_div +  trans, mpg))
order(data(3:4))
order(data[order(3,4)])
order(data[order(3)])
data[order(3)]
data[order(3,4)]
data[data[order(3,4)]]
data
order(3,4)
data[order(3,4)]
data[order(data$highway.mean)]
order(data$highway.mean)
data[order(data$highway.mean)]
data
data <- c(10,30,100,1,3)
names(data) <- c('1st','2nd','3rd','4th','5th')
data
sort(data)
data
data[order(data)]
data
order(data)
data[order(data)]
order(data$highway.mean)
order(data$highway.mean)
order(unlist(data$highway.mean)
order(unlist(data$highway.mean))
unlist(data$highway.mean)
data <- summaryBy(highway + city ~ displ_div +  trans, mpg)
data
order(unlist(data$highway.mean))
data[order(unlist(data$highway.mean))]
unlist(data$highway.mean)
data[order(unlist(data$highway.mean))]
data[order(data$highway.mean)]
order(data$highway.mean)
data[order(data$highway.mean)]
data[,order(data$highway.mean)]
data[order(data$highway.mean),]
data[order(-data$highway.mean),]
data[order(-data$city.mean,-data$highway.mean),]
sort(-data$city.mean,-data$highway.mean)
sort(data$city.mean)
sort(data$city.mean, -data$highway.mean)
sort(-data$city.mean)
?sort
sort(-data$city.mean)
#4.1 열 합치기(가로 합치기)
test1 <- data.frame(id=c(1,2,3,4,5),
midterm =  c(79,80,90,95,99))
test2 <- data.frame(id=c(1,2,3,4,5),
finalterm =c(90,80,70,60,99),
teacherid=c(1,1,2,2,3))
test2 <- data.frame(id=c(1,2,3,4,5),
finalterm =c(90,80,70,60,99),
teacherid=c(1,1,2,2,3))
teacher <- data.frame(teacherid=c(1,2,3),
teachername=c('Kim','Park','Ryu'))
cbind(test1, test2)
merge(test1, test2)
left_join(test1, test2, by='id')
#cbind(test2, teacher)
left_join(test2, teacher, by='teacherid')
#cbind(test2, teacher)
left_join(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid')
#cbind(test2, teacher)
left_join(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid')
#cbind(test2, teacher)
left_join(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid')
test2 <- data.frame(id=c(1,2,3,4,5),
finalterm =c(90,80,70,60,99),
teacherid=c(1,1,2,2,4))
teacher <- data.frame(teacherid=c(1,2,3),
teachername=c('Kim','Park','Ryu'))
left_join(test2, teacher, by='teacherid')
merge(test2, teacher, by='teacherid')
#4.2 행 합치기(세로 합치기)
group_a <- data.frame(id=c(1,2,3,4,5),
test=c(60,70,80,90,95))
group_b <- data.frame(id=c(6,7,8,9,10),
test=c(90,95,94,93,92))
rbind(group_a, group_b)
rbind(group_a, group_b)
bind_rows(group_a, group_b)
group_a <- data.frame(id=c(1,2,3,4,5),
test1=c(60,70,80,90,95))
group_b <- data.frame(id=c(6,7,8,9,10),
test2=c(90,95,94,93,92))
# 두 데이터의 프레임의 변수가 일부 같지 않은 경우
rbind(group_a, group_b)
bind_rowS(group_a, group_b)
# 두 데이터의 프레임의 변수가 일부 같지 않은 경우
rbind(group_a, group_b)
bind_rowS(group_a, group_b)
bind_rows(group_a, group_b)
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA)
income=c(2000,c(3000,4000,5000)
na.om
'))
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA)
income=c(2000,c(3000,4000,5000)
na.omit(df)
'))
bind_rows(group_a, group_b)
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA)
income=c(2000,c(3000,4000,5000)
na.omit(df)
'))
# 두 데이터의 프레임의 변수가 일부 같지 않은 경우
rbind(group_a, group_b)
bind_rows(group_a, group_b)
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA),
income=c(2000,c(3000,4000,5000)
na.omit(df)
'))
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA),
income=c(2000,c(3000,4000,5000)
na.omit(df)
'))
tapply(df$score, df$gender, mean, na.rm=T)
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA),
income=c(2000,c(3000,4000,5000)
na.omit(df)
'))
tapply(df$score, df$gender, mean, na.rm=T)
df <- dafa.frame(name=c('kim','Yi','yun','Ma','Mark'),
gender=c('M','F','NA,'M','f'),
score=c(5,4,3,4,NA),
income=c(2000,c(3000,4000,5000))
na.omit(df)
'))
tapply(df$score, df$gender, mean, na.rm=T)
x <- c(1,1,2,2,3,3,3,4,4,5,5,100)
mean(x)
median(x)
exam <- read.csv("inData/exam.csv",header=T)
table(is.na(exam))
colnames(exam)
exam[c(3,8,15),'math']
exam[c(3,8,15),'math']
exam[1:2,'english']
exam <- read.csv("inData/exam.csv",header=T)
table(is.na(exam))
colnames(exam)
exam[c(3,8,15),'math']
exam[1:2,'english']
table(is.na(exam))
apply(exam[3:5],2,mean, na.rm=T)
apply(exam[3:5],1,mean, na.rm=T)
apply(exam[3:5],2,mean, na.rm=T)
tapply(exam[,3],exam$class, mean)
tapply(exam[,3],exam$class, mean)
#결측치들을 중앙값 대체
exam
exam[c(3,8,15),'math']
exam[c(3,8,15),'math'] <- NA
exam[1:2,'english'] <- NA
table(is.na(exam))
apply(exam[3:5],2,mean, na.rm=T)
tapply(exam[,3],exam$class, mean)
exam %>%
summarise(math=mean(math,na.rm=T),
english=mean(english,na.rm=T),
science=mean(science,na.rm=T),
)
exam$math
exam$math <- ifelse(is.na(exam$math), median(exam$math), exam$math)
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam%math
exam$math
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$english <- ifelse(is.na(exam$english), median(exam$english, na.rm=T), exam$english))
exam$english <- ifelse(is.na(exam$english), median(exam$english, na.rm=T), exam$english)
exam$english
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$math <- ifelse(is.na(exam$math), round(mean(exam$math,ma.rm=T)), exam$math)
exam$math
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam[c(3,8,15),'math'] <- N/A
exam[c(3,8,15),'math'] <- NA
exam[1:2,'english'] <- NA
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$english
exam$english <- ifelse(is.na(exam$english), median(exam$english, na.rm=T), exam$english)
exam$english
exam$math <- ifelse(is.na(exam$math), median(exam$math,ma.rm=T), exam$math)
exam$math
exam$math[3]
is.na(exam$math[3])
exam$math[3] <- ifelse(is.na(exam$math[3]), median(exam$math[3],ma.rm=T), exam$math[3])
exam$math[3]
is.na(exam$math[3]
is.na(exam$math[3]
is.na(exam$math[3]
exam$math[3] <- ifelse(is.na(exam$math[3]), median(exam$math[3],ma.rm=T), exam$math[3])
exam$math[3] <- ifelse(is.na(exam$math[3]), median(exam$math[3],ma.rm=T), exam$math[3])
is.na(exam$math[3]
is.na(exam$math[3])
is.na(exam$math[3])
is.na(exam$math[3])
median(exam$math[3],ma.rm=T)
exam$math <- ifelse(is.na(exam$math), median(exam$math,na.rm=T), exam$math)
exam$math
median(exam$math[3],ma.rm=T)
exam <- read.csv("inData/exam.csv",header=T)
table(is.na(exam))
colnames(exam)
exam[c(3,8,15),'math'] <- NA
exam[1:2,'english'] <- NA
table(is.na(exam))
apply(exam[3:5],2,mean, na.rm=T)
tapply(exam[,3],exam$class, mean)
exam$math
table(is.na(exam))
table(is.na(exam))
colSums(is.na(exam))
#결측치 대체 방법1
exam <- within(exam,
math <- ifelse(is.na(math), median['math'],math)
english <- ifelse(is.na(english), median['english'],english)
science <- ifelse(is.na(science), median['science'],science)
)
science <- ifelse(is.na(science), median['science'],science)
colSums(is.na(exam))
#결측치 대체 방법1
exam <- within(exam,{
math <- ifelse(is.na(math), median['math'],math)
english <- ifelse(is.na(english), median['english'],english)
science  <- ifelse(is.na(science ), median['science'],science )
})
#결측치 대체 방법1
exam <- within(exam,{
math <- ifelse(is.na(math), median['math'],math)
english <- ifelse(is.na(english), median['english'],english)
science  <- ifelse(is.na(science ), median['science'],science )
})
#결측치 대체 방법1
exam <- within(exam,{
math <- ifelse(is.na(math), median['math'],math)
english <- ifelse(is.na(english), median['english'],english)
science  <- ifelse(is.na(science ), median['science'],science )
})
#결측치 대체 방법1
exam <- within(exam,{
math <-    ifelse(is.na(math)   , median['math']   ,math)
english <- ifelse(is.na(english), median['english'],english)
science <- ifelse(is.na(science), median['science'],science )
})
#결측치 대체 방법1
exam <- within(exam,{
math <-    ifelse(is.na(math)   , median['math']   ,math),
english <- ifelse(is.na(english), median['english'],english),
science <- ifelse(is.na(science), median['science'],science )
})
#결측치 대체 방법1
exam <- within(exam,{
math <-    ifelse(is.na(math)   , median['math']   ,math)
english <- ifelse(is.na(english), median['english'],english)
science <- ifelse(is.na(science), median['science'],science )
})
exam$median['math']
median['math']
median['math'];
median['english'];
exam <- exam %>%
exam
exam %>%
outlier <- data.frame(gender=c(1,2,1,3,2),
score=c(90,95,100,99,101)
)
outlier <- data.frame(gender=c(1,2,1,3,2),
score=c(90,95,100,99,101)
)
outlier <- data.frame(gender=c(1,2,1,3,2),score=c(90,95,100,99,101))
table(outlier$gender)
outlier$gender <- ifelse(outlier$gender==3, NA, outlier$gender)
mpg$hwy
mpg$hwy
mpg <- as.data.frame(ggplot2::mpg)
mpg$hwy
mean(mpg$hwy)
mean(mpg$hwy)+3*sd(mpg$hwy)
ifelse(hwy >  mean(mpg$hwy)+3*sd(mpg$hwy),'1','2')
ifelse(mpg$hwy >  mean(mpg$hwy)+3*sd(mpg$hwy),'1','2')
mpg$hwy
mpg
ifelse(mpg$hwy >  mean(mpg$hwy)+3*sd(mpg$hwy),'1','이상해해')
ifelse(mpg$hwy >  mean(mpg$hwy)+3*sd(mpg$hwy),'이상해','정상')
mean(mpg$hwy)+3*sd(mpg$hwy)
ifelse(mpg$hwy >  mean(mpg$hwy)+3*sd(mpg$hwy),mpg$hwy,'정상')
subset(mpg, mpg$hwy==44)
boxplot(mpg$hwy)
mean(mpg$hwy)+3*sd(mpg$hwy)
mean(mpg$hwy)-3*sd(mpg$hwy)
result <- boxplot(mpg$hwy)$stats
result
result[1]; result[5]
mpg$hwy <- ifelse(mpg$hwy>result[5] | mpg$hwy<result[1], NA, mpg$hwy)
boxplot(mpg$hwy)
table(is.na(mpg$hwy))
mpg
mpg%fuel
mpg%fl
mpg$fl
fuel <- data.frame(fl=c('c','d','e','p','r'),
price=c(2.35,2.38,2.11,2.76,2.22)
)
fuel
left_join(mpg,fuel,by='fl')
mpg2 <- left_join(mpg,fuel,by='fl')
table(mpg$drv)
#Q2
head(mpg2$fl_price,5)
mpg2
#5 혼자해보기
#Q1
fuel <- data.frame(fl=c('c','d','e','p','r'),
price_fl=c(2.35,2.38,2.11,2.76,2.22)
)
fuel
mpg2 <- left_join(mpg,fuel,by='fl')
mpg2
#Q2
head(mpg2$fl_price,5)
#Q2
head(mpg2$price_fl,5)
#Q2
head(mpg2['model','fl','price_fl',5)
#Q2
head(mpg2['model','fl','price_fl'],5)
mpg2['model','fl','price_fl']
mpg2['model']
mpg2[c('model','fl','price_fl'])
mpg2[c('model','fl','price_fl')]
#Q2
head(mpg2[c('model','fl','price_fl')],5)
mw <- ggplot2::midwest
mw
mw <- data.frame(ggplot2::midwest)
mw
round(mw$popadults / mw$poptotal * 100,2)
mw$apt <- round(mw$popadults / mw$poptotal * 100,2)
head(mw)
mw[,c(mw$popadults, mw$poptotal, mw$apt )]
mw[,c('popadults', 'poptotal', 'apt' )]
head(mw[,c('popadults', 'poptotal', 'apt' )])
# 문제2
mw[order(-apt)]
# 문제2
mw[order(-mw$apt)]
order(-mw$apt)
# 문제2
mw[order(-mw$apt),]
# 문제2
mw[order(mw$apt),]
# 문제2
head(mw[order(mw$apt),])
# 문제2
head(mw[order(mw$apt),'apt'])
# 문제2
head(mw[order(mw$apt),100-'apt'])
# 문제2
head(mw[order(mw$apt),'apt'])
# 문제2
100-head(mw[order(mw$apt),'apt'])
ifelse( 100-mw$apt>=40,'large',ifelse( 100-mw$apt<30,'small','middle' ))
mw$krg <- ifelse( 100-mw$apt>=40,'large',ifelse( 100-mw$apt<30,'small','middle' ))
head(mw[,c('popadults', 'poptotal', 'apt', 'krg' )])
head(mw[,c('popadults', 'poptotal', 'apt', 'krg' )],20)
head(mw[,c('popadults', 'poptotal', 'apt', 'krg' )],30)
mw[,c('popadults', 'poptotal', 'apt', 'krg' )]
mw$aspt <- round(mw$popasian / mw$poptotal * 100,2)
tail(mw[order(mw$aspt),c('state','country','aspt')],10)
tail(mw[order(mw$aspt),c('state','country')],10)
mw[order(mw$aspt),'aspt']
mw[order(mw$aspt),c('aspt')]
str(mw)
mw[order(mw$aspt),c('state','county','aspt')]
tail(mw[order(mw$aspt),c('state','county','aspt')],10)
mw[order(mw$aspt),c('state','county','aspt')]
head(mw[order(mw$aspt),c('state','county','aspt')],10)
??order
?order
??order
??iris
??iris
??iris
library(help='iris')
library(help='xl')
library(help='dplyr')
methods('group')
methods(group)
methods('group')
methods('as')
args(as.frame)
args(as.data.frame)
